% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/standard_plot.R
\name{create_standard_ts_plot}
\alias{create_standard_ts_plot}
\title{Create a standard plot using a time-series tibble}
\usage{
create_standard_ts_plot(
  ts_data,
  time_var,
  y_var,
  scale_y = NULL,
  title = NULL,
  subtitle = NULL,
  caption = NULL,
  y_label = NULL,
  incl_means = TRUE
)
}
\arguments{
\item{ts_data}{A tibble (\code{tbl_df}) object that contains R \code{Date} values and
at least a numeric column to serve as y values.}

\item{time_var}{The name of the column in \code{ts_data} that contains the R
\code{Date} values.}

\item{y_var}{The name of the column in \code{ts_data} that contains the y values.}

\item{scale_y}{An optional \strong{scales} function to apply to the y values.}

\item{title, subtitle, caption}{Optional string values for the table's title,
subtitle, and caption (appears lower right).}

\item{y_label}{An optional custom label for the y-axis label.}

\item{incl_means}{Should lines for weekly means be shown? If \code{TRUE}, they
will be shown in an orange color.}
}
\description{
The \code{create_standard_ts_plot()} provides a means to generate a standardized
time series plot. The requirement is a tibble that has a column with R \code{Date}
values (\code{time_var}) and some other numeric column to be used as the y value
(\code{y_var}). We can add the plot \code{title}, \code{subtitle}, and \code{caption} here if so
desired. The y-axis label can be defined with the \code{y_label} option (the
x-axis label is not shown). Mean values for standard weeks can be optionally
shown by supplying \code{TRUE} to the \code{incl_means} argument. Finally, we can scale
y values by providing the appropriate \strong{scales} function to \code{scale_y}.
}
\examples{
\dontrun{
library(lubridate)
library(dplyr)
library(glue)

# Create a DB connection
intendo <- db_con()

# Get a vector of dates over 30 days
end_date <- as.Date("2015-03-01")

dates <-
  seq(
     from = end_date - days(30),
     to = end_date,
     by = 1
     ) \%>\%
  as.character()

# Get IAP revenue for the dates selected
iap_revenue_period <-
  tbl_daily_users(con = intendo) \%>\%
  mutate(date = as.Date(time)) \%>\%
  filter(date \%in\% {{ dates }}) \%>\%
  group_by(date) \%>\%
  summarize(total_revenue = sum(total_revenue, na.rm = TRUE)) \%>\%
  collect()

# Create the time-series plot for the 30-day period
revenue_plot <-
}

}
